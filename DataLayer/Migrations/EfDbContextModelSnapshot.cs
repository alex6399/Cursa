// <auto-generated />
using System;
using DataLayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace DataLayer.Migrations
{
    [DbContext(typeof(EfDbContext))]
    partial class EfDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("DataLayer.Entities.Contractor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Contractors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Онимет, АО"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Газпром автоматизация, ООО"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "ООО \"Лидер\""
                        });
                });

            modelBuilder.Entity("DataLayer.Entities.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Конструкторский"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Управление"
                        });
                });

            modelBuilder.Entity("DataLayer.Entities.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("CreatedUserId")
                        .HasColumnType("integer");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("integer");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("ModifiedUserId")
                        .HasColumnType("integer");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("ModifiedUserId");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DepartmentId = 1,
                            FirstName = "Андрей",
                            LastName = "Вашин",
                            MiddleName = "Александрович",
                            Phone = "+79173155974"
                        },
                        new
                        {
                            Id = 2,
                            DepartmentId = 1,
                            FirstName = "Никита",
                            LastName = "Кузебердин",
                            MiddleName = "Петрович",
                            Phone = "+79273180075"
                        },
                        new
                        {
                            Id = 3,
                            DepartmentId = 2,
                            FirstName = "Олег",
                            LastName = "Хватов",
                            MiddleName = "Сергеевич",
                            Phone = "+79193955666"
                        });
                });

            modelBuilder.Entity("DataLayer.Entities.Module", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("ActualOrderCardId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("CreatedUserId")
                        .HasColumnType("integer");

                    b.Property<int>("DestinationOrderCardId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ManufacturingData")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("ModifiedUserId")
                        .HasColumnType("integer");

                    b.Property<int>("ModuleTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("Place")
                        .HasColumnType("integer");

                    b.Property<int?>("SerialNumber")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ActualOrderCardId");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("DestinationOrderCardId");

                    b.HasIndex("ModifiedUserId");

                    b.HasIndex("ModuleTypeId");

                    b.ToTable("Modules");
                });

            modelBuilder.Entity("DataLayer.Entities.ModuleSubTypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.HasKey("Id");

                    b.ToTable("ModulesSubTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "УСО аналоговый"
                        },
                        new
                        {
                            Id = 2,
                            Name = "УСО дискретный"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Блок системный"
                        });
                });

            modelBuilder.Entity("DataLayer.Entities.ModuleType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("CountChanel")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(1200)
                        .HasColumnType("character varying(1200)");

                    b.Property<bool>("IsActiv")
                        .HasColumnType("boolean");

                    b.Property<int>("ModuleSubTypesId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)");

                    b.HasKey("Id");

                    b.HasIndex("ModuleSubTypesId");

                    b.ToTable("ModuleTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "ЛДАР.468155.047",
                            CountChanel = 4,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActiv = true,
                            ModuleSubTypesId = 1,
                            Name = "IA - 4k42 - M "
                        },
                        new
                        {
                            Id = 2,
                            Code = "ЛДАР.468155.049",
                            CountChanel = 8,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActiv = true,
                            ModuleSubTypesId = 1,
                            Name = "IA-8k42"
                        },
                        new
                        {
                            Id = 3,
                            Code = "ЛДАР.468155.046",
                            CountChanel = 4,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActiv = true,
                            ModuleSubTypesId = 1,
                            Name = "OA - 4k42 - M"
                        },
                        new
                        {
                            Id = 4,
                            Code = "ЛДАР.469219.043",
                            CountChanel = 8,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActiv = true,
                            ModuleSubTypesId = 2,
                            Name = "ID - 8k24 - M "
                        },
                        new
                        {
                            Id = 5,
                            Code = "ЛДАР.469219.060",
                            CountChanel = 16,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActiv = true,
                            ModuleSubTypesId = 2,
                            Name = "ID - 16k24 "
                        },
                        new
                        {
                            Id = 6,
                            Code = "ЛДАР.468154.050",
                            CountChanel = 5,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActiv = true,
                            ModuleSubTypesId = 2,
                            Name = "OD - 5k - M "
                        },
                        new
                        {
                            Id = 7,
                            Code = "ЛДАР.468154.055",
                            CountChanel = 16,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActiv = true,
                            ModuleSubTypesId = 1,
                            Name = "ОD - 16k24 "
                        },
                        new
                        {
                            Id = 8,
                            Code = "ЛДАР.468155.048",
                            CountChanel = 3,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActiv = true,
                            ModuleSubTypesId = 1,
                            Name = "IF - 3k "
                        },
                        new
                        {
                            Id = 9,
                            Code = "ЛДАР.469239.104",
                            CountChanel = 0,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActiv = true,
                            ModuleSubTypesId = 1,
                            Name = "USB/RS-485-4k"
                        },
                        new
                        {
                            Id = 10,
                            Code = "ЛДАР.469239.299",
                            CountChanel = 0,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActiv = true,
                            ModuleSubTypesId = 1,
                            Name = "Com/RS-485"
                        },
                        new
                        {
                            Id = 11,
                            Code = "ЛДАР.469239.235",
                            CountChanel = 0,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActiv = true,
                            ModuleSubTypesId = 3,
                            Name = "LPBS-15-М"
                        });
                });

            modelBuilder.Entity("DataLayer.Entities.OrderCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("CreatedUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("ModifiedUserId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Path")
                        .HasColumnType("text");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifiedUserId");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("ProductId");

                    b.ToTable("OrderCards");
                });

            modelBuilder.Entity("DataLayer.Entities.Owner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Owners");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Комита"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Элна"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "ООО АО"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "ОАО"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "СГС"
                        });
                });

            modelBuilder.Entity("DataLayer.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CertifiedNum")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("CreatedUserId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<bool>("IsFormed")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ManufacturingDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("ModifiedUserId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("OrderDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ProductTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("SerialNum")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ShippedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("SubProjectId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CertifiedNum")
                        .IsUnique();

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifiedUserId");

                    b.HasIndex("ProductTypeId");

                    b.HasIndex("SerialNum")
                        .IsUnique();

                    b.HasIndex("SubProjectId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("DataLayer.Entities.ProductSubType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.HasKey("Id");

                    b.ToTable("ProductSubTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "АСУ"
                        },
                        new
                        {
                            Id = 2,
                            Name = "САУ"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Система пожарной автоматики"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Система учета энергоресурсов"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Системы локальной автоматики"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Телемеханика"
                        });
                });

            modelBuilder.Entity("DataLayer.Entities.ProductType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<int>("ProductSubTypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProductSubTypeId");

                    b.ToTable("ProductTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "УСО РУ",
                            ProductSubTypeId = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "САУ К",
                            ProductSubTypeId = 1
                        },
                        new
                        {
                            Id = 3,
                            Name = "САУ В",
                            ProductSubTypeId = 1
                        });
                });

            modelBuilder.Entity("DataLayer.Entities.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("CreatedUserId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("ModifiedUserId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("OwnerId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ModifiedUserId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("OwnerId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("DataLayer.Entities.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("NameStatus")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<int>("StatusTypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("StatusTypeId");

                    b.ToTable("Statuses");
                });

            modelBuilder.Entity("DataLayer.Entities.StatusType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("StatusTypeName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.ToTable("StatusTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StatusTypeName = "ПРОЕКТЫ"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StatusTypeName = "ЗАКАЗ"
                        });
                });

            modelBuilder.Entity("DataLayer.Entities.SubProject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Contract")
                        .HasColumnType("text");

                    b.Property<int?>("ContractorId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("CreatedUserId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("ModifiedUserId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("ContractorId");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ModifiedUserId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("ProjectId");

                    b.HasIndex("StatusId");

                    b.ToTable("SubProjects");
                });

            modelBuilder.Entity("DataLayer.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("CreatedUserId")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<bool>("IsLockout")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MiddleName")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("ModifiedUserId")
                        .HasColumnType("integer");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifiedUserId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("DataLayer.Entities.Employee", b =>
                {
                    b.HasOne("DataLayer.Entities.User", "CreatedUser")
                        .WithMany("CreatedEmployees")
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("DataLayer.Entities.Department", "Department")
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.Entities.User", "ModifiedUser")
                        .WithMany("ModifiedEmployees")
                        .HasForeignKey("ModifiedUserId");

                    b.Navigation("CreatedUser");

                    b.Navigation("Department");

                    b.Navigation("ModifiedUser");
                });

            modelBuilder.Entity("DataLayer.Entities.Module", b =>
                {
                    b.HasOne("DataLayer.Entities.OrderCard", "ActualOrderCard")
                        .WithMany()
                        .HasForeignKey("ActualOrderCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.Entities.User", "CreatedUser")
                        .WithMany("CreatedModules")
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("DataLayer.Entities.OrderCard", "DestinationOrderCard")
                        .WithMany("Modules")
                        .HasForeignKey("DestinationOrderCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.Entities.User", "ModifiedUser")
                        .WithMany("ModifiedModules")
                        .HasForeignKey("ModifiedUserId");

                    b.HasOne("DataLayer.Entities.ModuleType", "ModuleType")
                        .WithMany()
                        .HasForeignKey("ModuleTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActualOrderCard");

                    b.Navigation("CreatedUser");

                    b.Navigation("DestinationOrderCard");

                    b.Navigation("ModifiedUser");

                    b.Navigation("ModuleType");
                });

            modelBuilder.Entity("DataLayer.Entities.ModuleType", b =>
                {
                    b.HasOne("DataLayer.Entities.ModuleSubTypes", "ModuleSubTypes")
                        .WithMany()
                        .HasForeignKey("ModuleSubTypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ModuleSubTypes");
                });

            modelBuilder.Entity("DataLayer.Entities.OrderCard", b =>
                {
                    b.HasOne("DataLayer.Entities.User", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("DataLayer.Entities.User", "ModifiedUser")
                        .WithMany()
                        .HasForeignKey("ModifiedUserId");

                    b.HasOne("DataLayer.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifiedUser");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("DataLayer.Entities.Product", b =>
                {
                    b.HasOne("DataLayer.Entities.User", "CreatedUser")
                        .WithMany("CreatedProducts")
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("DataLayer.Entities.User", "ModifiedUser")
                        .WithMany("ModifiedProducts")
                        .HasForeignKey("ModifiedUserId");

                    b.HasOne("DataLayer.Entities.ProductType", "ProductType")
                        .WithMany()
                        .HasForeignKey("ProductTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.Entities.SubProject", "SubProject")
                        .WithMany("Products")
                        .HasForeignKey("SubProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifiedUser");

                    b.Navigation("ProductType");

                    b.Navigation("SubProject");
                });

            modelBuilder.Entity("DataLayer.Entities.ProductType", b =>
                {
                    b.HasOne("DataLayer.Entities.ProductSubType", "ProductSubType")
                        .WithMany("ProductTypes")
                        .HasForeignKey("ProductSubTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductSubType");
                });

            modelBuilder.Entity("DataLayer.Entities.Project", b =>
                {
                    b.HasOne("DataLayer.Entities.User", "CreatedUser")
                        .WithMany("CreatedProjects")
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("DataLayer.Entities.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.Entities.User", "ModifiedUser")
                        .WithMany("ModifiedProjects")
                        .HasForeignKey("ModifiedUserId");

                    b.HasOne("DataLayer.Entities.Owner", "Owner")
                        .WithMany("Projects")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedUser");

                    b.Navigation("Employee");

                    b.Navigation("ModifiedUser");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("DataLayer.Entities.Status", b =>
                {
                    b.HasOne("DataLayer.Entities.StatusType", "StatusType")
                        .WithMany("Statuses")
                        .HasForeignKey("StatusTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("StatusType");
                });

            modelBuilder.Entity("DataLayer.Entities.SubProject", b =>
                {
                    b.HasOne("DataLayer.Entities.Contractor", "Contractor")
                        .WithMany("SubProjects")
                        .HasForeignKey("ContractorId");

                    b.HasOne("DataLayer.Entities.User", "CreatedUser")
                        .WithMany("CreatedSubProjects")
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("DataLayer.Entities.Employee", "Employee")
                        .WithMany("SubProjects")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.Entities.User", "ModifiedUser")
                        .WithMany("ModifiedSubProjects")
                        .HasForeignKey("ModifiedUserId");

                    b.HasOne("DataLayer.Entities.Project", "Project")
                        .WithMany("SubProjects")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataLayer.Entities.Status", "Status")
                        .WithMany("SubProjects")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Contractor");

                    b.Navigation("CreatedUser");

                    b.Navigation("Employee");

                    b.Navigation("ModifiedUser");

                    b.Navigation("Project");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("DataLayer.Entities.User", b =>
                {
                    b.HasOne("DataLayer.Entities.User", "CreatedUser")
                        .WithMany("CreatedUsers")
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("DataLayer.Entities.User", "ModifiedUser")
                        .WithMany("ModifiedUsers")
                        .HasForeignKey("ModifiedUserId");

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifiedUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("DataLayer.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("DataLayer.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("DataLayer.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataLayer.Entities.Contractor", b =>
                {
                    b.Navigation("SubProjects");
                });

            modelBuilder.Entity("DataLayer.Entities.Department", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("DataLayer.Entities.Employee", b =>
                {
                    b.Navigation("SubProjects");
                });

            modelBuilder.Entity("DataLayer.Entities.OrderCard", b =>
                {
                    b.Navigation("Modules");
                });

            modelBuilder.Entity("DataLayer.Entities.Owner", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("DataLayer.Entities.ProductSubType", b =>
                {
                    b.Navigation("ProductTypes");
                });

            modelBuilder.Entity("DataLayer.Entities.Project", b =>
                {
                    b.Navigation("SubProjects");
                });

            modelBuilder.Entity("DataLayer.Entities.Status", b =>
                {
                    b.Navigation("SubProjects");
                });

            modelBuilder.Entity("DataLayer.Entities.StatusType", b =>
                {
                    b.Navigation("Statuses");
                });

            modelBuilder.Entity("DataLayer.Entities.SubProject", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("DataLayer.Entities.User", b =>
                {
                    b.Navigation("CreatedEmployees");

                    b.Navigation("CreatedModules");

                    b.Navigation("CreatedProducts");

                    b.Navigation("CreatedProjects");

                    b.Navigation("CreatedSubProjects");

                    b.Navigation("CreatedUsers");

                    b.Navigation("ModifiedEmployees");

                    b.Navigation("ModifiedModules");

                    b.Navigation("ModifiedProducts");

                    b.Navigation("ModifiedProjects");

                    b.Navigation("ModifiedSubProjects");

                    b.Navigation("ModifiedUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
